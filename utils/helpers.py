# utils/helpers.py
# Enhanced helpers with registration link generation

import os
from datetime import datetime, timedelta
from werkzeug.utils import secure_filename
from flask import current_app, url_for
import secrets

def allowed_file(filename):
    """Check if file extension is allowed"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in current_app.config['ALLOWED_EXTENSIONS']

def save_profile_image(file):
    """Save uploaded profile image and return filename"""
    if file and allowed_file(file.filename):
        # Generate unique filename
        random_hex = secrets.token_hex(8)
        _, f_ext = os.path.splitext(file.filename)
        filename = random_hex + f_ext
        
        # Ensure upload directory exists
        upload_path = os.path.join(current_app.root_path, current_app.config['PROFILE_UPLOAD_FOLDER'])
        os.makedirs(upload_path, exist_ok=True)
        
        # Save file
        file_path = os.path.join(upload_path, filename)
        file.save(file_path)
        
        return filename
    return None

def delete_profile_image(filename):
    """Delete profile image file"""
    if filename and filename != 'default.png':
        file_path = os.path.join(current_app.root_path, current_app.config['PROFILE_UPLOAD_FOLDER'], filename)
        if os.path.exists(file_path):
            os.remove(file_path)

def calculate_plan_expiry(plan):
    """Calculate plan expiry date based on plan period"""
    if plan.period_type == 'YEARLY':
        return datetime.utcnow() + timedelta(days=365 * plan.period_value)
    elif plan.period_type == 'MONTHLY':
        return datetime.utcnow() + timedelta(days=30 * plan.period_value)
    else:  # CUSTOM (days)
        return datetime.utcnow() + timedelta(days=plan.period_value)

def generate_registration_link():
    """Generate unique registration link token"""
    return secrets.token_urlsafe(32)

def log_activity(user_id, activity_type, description, metadata=None):
    """Log user activity"""
    from models import get_activities_collection
    from bson import ObjectId
    
    activity = {
        'user_id': ObjectId(user_id) if isinstance(user_id, str) else user_id,
        'activity_type': activity_type,
        'description': description,
        'metadata': metadata or {},
        'ip_address': None,  # Can be enhanced to capture IP
        'user_agent': None,  # Can be enhanced to capture user agent
        'created_at': datetime.utcnow()
    }
    
    get_activities_collection().insert_one(activity)

def format_datetime(dt):
    """Format datetime for display"""
    if not dt:
        return ''
    return dt.strftime('%Y-%m-%d %H:%M:%S')

def format_date(dt):
    """Format date for display"""
    if not dt:
        return ''
    return dt.strftime('%Y-%m-%d')

def paginate_query(collection, query, page, per_page):
    """Paginate MongoDB query results"""
    total = collection.count_documents(query)
    skip = (page - 1) * per_page
    items = list(collection.find(query).skip(skip).limit(per_page))
    
    return {
        'items': items,
        'total': total,
        'page': page,
        'per_page': per_page,
        'total_pages': (total + per_page - 1) // per_page
    }

def check_partner_pdf_limit(partner_id):
    """Check if partner has reached PDF limit"""
    from models import get_users_collection
    from bson import ObjectId
    
    users = get_users_collection()
    
    # Get partner data
    partner = users.find_one({'_id': ObjectId(partner_id), 'role': 'PARTNER'})
    if not partner:
        return False, "Partner not found"
    
    # Calculate total PDFs generated by partner's agents
    agents = users.find({'partner_id': ObjectId(partner_id), 'role': 'AGENT'})
    total_pdfs = sum(agent.get('agent_pdf_generated', 0) for agent in agents)
    
    if total_pdfs >= partner.get('pdf_limit', 0):
        return False, "Partner PDF limit reached"
    
    return True, partner.get('pdf_limit', 0) - total_pdfs
# utils/helpers.py - Add these functions after the existing helper functions

def allowed_payment_file(filename):
    """Check if payment file extension is allowed"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in current_app.config.get('PAYMENT_ALLOWED_EXTENSIONS', {'png', 'jpg', 'jpeg', 'gif', 'pdf'})

def save_payment_proof(file):
    """Save uploaded payment proof and return filename"""
    if file and allowed_payment_file(file.filename):
        # Generate unique filename
        random_hex = secrets.token_hex(8)
        _, f_ext = os.path.splitext(file.filename)
        filename = f"payment_{random_hex}{f_ext}"
        
        # Ensure upload directory exists
        upload_path = os.path.join(current_app.root_path, current_app.config.get('PAYMENT_UPLOAD_FOLDER', 'static/uploads/payments'))
        os.makedirs(upload_path, exist_ok=True)
        
        # Save file
        file_path = os.path.join(upload_path, filename)
        file.save(file_path)
        
        return filename
    return None

def delete_payment_proof(filename):
    """Delete payment proof file"""
    if filename:
        file_path = os.path.join(current_app.root_path, current_app.config.get('PAYMENT_UPLOAD_FOLDER', 'static/uploads/payments'), filename)
        if os.path.exists(file_path):
            os.remove(file_path)